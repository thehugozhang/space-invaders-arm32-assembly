.text

// These are addresses for the pixel buffer and text buffer
.EQU PIX_BUFFER, 0xc8000000
.EQU TEXT_BUFFER, 0xc9000000
.EQU PUSH_BUTTONS, 0xff200050

// These are some useful defines that will help you access structure fields
.EQU PIXMAP_XPOS, 0
.EQU PIXMAP_XVEL, 1
.EQU PIXMAP_YPOS, 2
.EQU PIXMAP_YVEL, 3

.EQU PIXMAP_WIDTH, 0
.EQU PIXMAP_HEIGHT, 2
.EQU PIXMAP_TRANSPARENCY, 4
.EQU PIXMAP_PIXELDATA, 6

.global _start
_start:
	
	// Inital stack
	mov sp, #0x800000
	
inf_loop:
	bl ClearTextBuffer
	
	ldrh r0, =0x0000
	bl ClearVGA
	
	bl CheckInput
		
	//////////////////////////
	// ENEMY1 CONFIGURATION //
	//////////////////////////
	
    ldr r0, =enemy1
    ldr r1, =enemy1_controls
    bl drawFirstEnemies

	//////////////////////////
	// ENEMY2 CONFIGURATION //
	//////////////////////////

    ldr r0, =enemy2
    ldr r1, =enemy2_controls
    bl drawSecondEnemies

	//////////////////////////
	// ENEMY3 CONFIGURATION //
	//////////////////////////
	
    ldr r0, =enemy3
    ldr r1, =enemy3_controls
    bl drawThirdEnemies

	//////////////////////////
	// PLAYER CONFIGURATION //
	//////////////////////////
	
	ldr r0, =spaceship_control
	ldr r1, =spaceship
	bl UpdatePos

	// ldr r0, =laser_controls
	// ldr r1, =laser
	// ldr r2, =laser_statuses
    // bl UpdateLasers
	
	ldr r0, =enemy_laser_controls
	ldr r1, =enemy_laser
	bl UpdateEnemyLasers

	b inf_loop

.data

// 1 here represents display status
enemy1_controls:
    .byte 22, 1, 64, 0
    .byte 57, 1, 64, 0
    .byte 91, 1, 64, 0
    .byte 126, 1, 64, 0
    .byte 160, 1, 64, 0
    .byte 194, 1, 64, 0
    .byte 229, 1, 64, 0
    .byte 263, 1, 64, 0
    .byte 298, 1, 64, 0

enemy1:
	.hword 24, 16, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x1e, 0x1f, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1f, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0
	.hword 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e
	.hword 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0
	.hword 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x1e, 0x1e
	.hword 0x0, 0x0, 0x0, 0x0

// 1 here represents display status
enemy2_controls:
    .byte 21, 1, 40, 0
    .byte 52, 1, 40, 0
    .byte 83, 1, 40, 0
    .byte 114, 1, 40, 0
    .byte 145, 1, 40, 0
    .byte 175, 1, 40, 0
    .byte 206, 1, 40, 0
    .byte 237, 1, 40, 0
    .byte 268, 1, 40, 0
    .byte 299, 1, 40, 0

enemy2:
	.hword 22, 16, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0, 0x7e0, 0x7c0
	.hword 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x0, 0x0, 0x7c0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0, 0x7e0, 0x7e0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x7e0, 0x7e0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x7e0, 0x7e0, 0x0, 0x0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0
	.hword 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0
	.hword 0x0, 0x0, 0x7e0, 0x7e0, 0x7e0, 0x7e0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0

// 1 here represents display status
enemy3_controls:
    .byte 16, 1, 16, 0
    .byte 40, 1, 16, 0
    .byte 64, 1, 16, 0
    .byte 88, 1, 16, 0
    .byte 112, 1, 16, 0
    .byte 136, 1, 16, 0
    .byte 160, 1, 16, 0
    .byte 184, 1, 16, 0
    .byte 208, 1, 16, 0
    .byte 232, 1, 16, 0
    .byte 256, 1, 16, 0
    .byte 280, 1, 16, 0
    .byte 304, 1, 16, 0

enemy3:
	.hword 16, 16, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0xf000, 0xf000, 0xf800, 0xf000, 0xf000, 0xf800, 0xf000, 0xf000
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0x0, 0x0
	.hword 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0x0, 0x0, 0x0, 0x0, 0xf000, 0xf000, 0x0, 0x0, 0x0, 0x0
	.hword 0xf000, 0xf000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0xf000, 0xf000, 0x0, 0x0, 0x0, 0x0, 0xf000, 0xf000, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000, 0x0, 0x0, 0x0, 0x0
	.hword 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000, 0xf000, 0xf000, 0x0, 0x0
	.hword 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf800, 0x0, 0x0, 0xf000, 0xf000
	.hword 0x0, 0x0, 0x0, 0x0, 0xf000, 0xf000, 0x0, 0x0, 0xf800, 0xf000
	.hword 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000, 0x0, 0x0, 0x0, 0x0
	.hword 0xf000, 0xf000, 0x0, 0x0, 0xf000, 0xf000

spaceship_control:
	.byte 160, 0, 224, 0
spaceship:
	.hword 30, 16, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0
	.hword 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.hword 0x0, 0x0, 0xffff, 0xf7de, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0
	.hword 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7de, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff

laser_beam_powerup_controls:
    .byte 0, 0, 0, 0
laser_beam_powerup:
	.hword 9, 217, 0x39e7
	.hword 0x39e7, 0x39e7, 0xb9f6, 0x9212, 0xbdf7, 0x9212, 0xb9f7, 0x3a07, 0x39e7, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffdf, 0xa815, 0xf81f, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf01e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0
	.hword 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815
	.hword 0xf81e, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e
	.hword 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0
	.hword 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0
	.hword 0x0, 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0
	.hword 0x0, 0xf81e, 0xa815, 0xffff, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0xf81e
	.hword 0xa815, 0xa815, 0xffff, 0xa815, 0xa815, 0xf81e, 0x0, 0x0, 0xf81e, 0xa815
	.hword 0xa815, 0xf7ff, 0xa815, 0xa815, 0xf81e, 0x0, 0x0, 0xf81e, 0xa815, 0xa815
	.hword 0xffff, 0xa815, 0xa815, 0xf81e, 0x0, 0x0, 0xf81f, 0xa815, 0xffff, 0xffff
	.hword 0xf7ff, 0xa815, 0xf81e, 0x0, 0xf81e, 0xa815, 0xa815, 0xffff, 0xffff, 0xffff
	.hword 0xa815, 0xa815, 0xf81e, 0xf81e, 0xa815, 0xa815, 0xffff, 0xffff, 0xffff, 0xa815
	.hword 0xa815, 0xf81e, 0xf81f, 0xa815, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xa815
	.hword 0xf81e, 0xf81e, 0xb015, 0xfffe, 0xf7ff, 0xffff, 0xffff, 0xffff, 0xa815, 0xf81e
	.hword 0xf81e, 0xa815, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xa815, 0xf81e, 0xf81e
	.hword 0xa815, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xa815, 0xf81e, 0xf81e, 0xa815
	.hword 0xa815, 0xffff, 0xffff, 0xffff, 0xa815, 0xa815, 0xf81e, 0x0, 0xf81e, 0xa815
	.hword 0xa815, 0xffff, 0xa815, 0xb015, 0xf01e, 0x0, 0x0, 0xf81e, 0xa815, 0xa815
	.hword 0xffff, 0xa815, 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0xf81e, 0xa815, 0xa815
	.hword 0xa815, 0xf81e, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf81e, 0xf81e, 0xf81e
	.hword 0x0, 0x0, 0x0

laser_beam_controls:
	.byte 0, 0, 0, 0
laser_beam:
	.hword 6, 217, 0xddd
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf
	.hword 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf
	.hword 0x7bf, 0x7bf, 0xffff, 0xffff, 0x7bf, 0x7bf, 0x7bf, 0x7bf, 0xffff, 0xffff
	.hword 0x7bf, 0x7bf

enemy_laser_controls:
	.byte 16, 0, 0, 10
	.byte 40, 0, 0, 10
	.byte 64, 0, 64, 10
	.byte 88, 0, 64, 10
	.byte 112, 0, 64, 10
	.byte 136, 0, 0, 10
	.byte 160, 0, 0, 10
	.byte 184, 0, 0, 10
	.byte 208, 0, 64, 10
	.byte 232, 0, 64, 10
	.byte 256, 0, 64, 10
	.byte 280, 0, 0, 10
	.byte 304, 0, 0, 10
	
enemy_laser:
	.hword 2, 8, 0xffff
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000
	.hword 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000

.align 4

.text

// Write your ClearTextBuffer, ClearVGA, and BitBlit routines below!

ClearTextBuffer:
	// Fills text buffer with spaces.
	// Prologue.
	push {r4, r5, lr}
	
	mov r3, #0x20
	mov r4, #0
	mov r5, #0

	b tb_width_for_loop

	increment_tb_width:
		mov r0, r4
		mov r1, r5
		bl DrawChar

		add r4, r4, #1
	tb_width_for_loop:
		// If reach end of width, continue to next line.
		cmp r4, #79
		blt increment_tb_width

		// If reach end of height, finish.
		cmp r5, #59
		bge tb_finish_clear
		add r5, #1
		mov r4, #0
		blt increment_tb_width

	tb_finish_clear:
		// Epilogue.
		pop {r4, r5, pc}

ClearVGA:
	// Fill video buffer with given color value.
	// r0 - color value.
	// Prologue.
	push {r4, r5, lr}
	
	mov r2, r0
	mov r4, #0
	mov r5, #0

	b pb_width_for_loop

	increment_pb_width:
		mov r0, r4
		mov r1, r5
		bl DrawPixelBuffer

		add r4, r4, #1
	pb_width_for_loop:
		// If reach end of width, continue to next line.
		cmp r4, #320
		blt increment_pb_width

		// If reach end of height, finish.
		cmp r5, #240
		bge pb_finish_clear
		add r5, #1
		mov r4, #0
		blt increment_pb_width

	pb_finish_clear:
		// Epilogue.
		pop {r4, r5, pc}

DrawPixelBuffer:
	// Helper function that draws color at coords (x,y).
	// r0 - x-coord.
	// r1 - y-coord.
	// r2 - color value.
	// Prologue.
	push {r4, r5, r6, r7, r9, r10, lr}

	mov r4, r0
	mov r5, r1
	mov r6, r2
	
	// Test bounds before drawing.
	cmp r4, #0
	blt OutOfBounds
	cmp r4, #320
	bgt OutOfBounds
	cmp r5, #0
	blt OutOfBounds
	cmp r5, #240
	bgt OutOfBounds

	ldr r7, =PIX_BUFFER

	// r10 stores {y<7:0>, x<8:0>, 0<0>}.
	lsl r9, r5, #9
	add r10, r9, r4
	lsl r10, r10, #1
	
	// Draw color.
	strh r6, [r7, r10]
	
	OutOfBounds:
		// Epilogue.
		pop {r4, r5, r6, r7, r9, r10, pc}

CheckInput:
	// Helper function that checks which push buttons pressed.
	// Prologue.
	push {r4, r5, r6, r7, r8, lr}
	
	// Convert coords to corresponding address.
	ldr r4, =PUSH_BUTTONS
	ldr r4, [r4]
	and r5, r4, #15
	
	ldr r6, =spaceship_control
	
	// Maps to 0000.
	cmp r5, #0
	beq NoPushButton
	
	// Maps to 0001.
	cmp r5, #1
	beq PushButton0
	
	// Maps to 0010.
	cmp r5, #2
	beq PushButton1
	
	// Maps to 0100.
	cmp r5, #4
	beq PushButton2
	
	// Maps to 1000.
	cmp r5, #8
	beq PushButton3
	
	// Not allowed push button combination.
	b exit_input
	
	NoPushButton:
		// Retrieve control value.
		ldrb r7, [r6, #PIXMAP_XVEL]
		ldrb r8, [r6, #PIXMAP_YVEL]
		
		mov r7, #0
		mov r8, #0
		
		// Store updated control values.
		strb r7, [r6, #PIXMAP_XVEL]
		strb r8, [r6, #PIXMAP_YVEL]
		
		b exit_input
	PushButton3:
		// Retrieve control value.
		ldrb r7, [r6, #PIXMAP_XVEL]

		mov r7, #-15

		// Store updated control values.
		strb r7, [r6, #PIXMAP_XVEL]
		
		b exit_input
	PushButton2:
		// Retrieve control value.
		ldrb r7, [r6, #PIXMAP_XVEL]

		mov r7, #15

		// Store updated control values.
		strb r7, [r6, #PIXMAP_XVEL]
		
		b exit_input
	PushButton1:
		ldr r0, =laser_beam
		ldr r1, =spaceship_control
        mov r2, #0
		bl FireLaserBeam
		
		b exit_input
	PushButton0:
		ldr r0, =laser_beam_powerup
		ldr r1, =spaceship_control
        mov r2, #16
		bl FireLaserBeam

		
	exit_input:
		// Epilogue.
		pop {r4, r5, r6, r7, r8, pc}

drawFirstEnemies:
	// r0 - pixmap ptr.
	// r1 - pixmap control ptr.
	// Prologue.
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

    mov r4, #0
    b drawFirstEnemiesBodyConditionTest

    drawFirstEnemiesBody:
        mov r5, #4
        mul r6, r4, r5
        
        // Get address of next enemy in struct.
        add r7, r1, r6

        // Retrieve control values.
		ldrb r8, [r7, #PIXMAP_XPOS]
		ldrb r9, [r7, #PIXMAP_YPOS]

        // X-Vel is sprite display status here.
        // 1 = draw, 0 = skip.
		ldrb r10, [r7, #PIXMAP_XVEL]
        cmp r10, #0
        beq skipDrawFirstEnemies

        // Adjust x's of sprites past 256.
        cmp r8, #0x7
        beq correctDrawFirstEnemiesByte
        cmp r8, #0x2a
		beq correctDrawFirstEnemiesByte
        b correctDrawFirstEnemies

        correctDrawFirstEnemiesByte:
            ldr r10, =#0x100
			add r8, r10, r8

        correctDrawFirstEnemies:
            mov r1, r8
            mov r2, r9
            bl BitBlit

        // Reset caller saved registers.
        ldr r0, =enemy1
        ldr r1, =enemy1_controls
		
    skipDrawFirstEnemies:
        add r4, r4, #1
		
    drawFirstEnemiesBodyConditionTest:
        cmp r4, #9
        blt drawFirstEnemiesBody


	// Epilogue.
	pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}

drawSecondEnemies:
	// r0 - pixmap ptr.
	// r1 - pixmap control ptr.
	// Prologue.
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

    mov r4, #0
    b drawSecondEnemiesConditionTest

    drawSecondEnemiesBody:
        mov r5, #4
        mul r6, r4, r5
        
        // Get address of next enemy in struct.
        add r7, r1, r6

        // Retrieve control values.
		ldrb r8, [r7, #PIXMAP_XPOS]
		ldrb r9, [r7, #PIXMAP_YPOS]

        // X-Vel is sprite display status here.
        // 1 = draw, 0 = skip.
		ldrb r10, [r7, #PIXMAP_XVEL]
        cmp r10, #0
        beq skipDrawSecondEnemies

        // Adjust x's of sprites past 256.
        cmp r8, #0xc
        beq correctDrawSecondEnemiesByte
        cmp r8, #0x2b
		beq correctDrawSecondEnemiesByte
        b correctDrawSecondEnemies

        correctDrawSecondEnemiesByte:
            ldr r10, =#0x100
			add r8, r10, r8

        correctDrawSecondEnemies:
            mov r1, r8
            mov r2, r9
            bl BitBlit

        // Reset caller saved registers.
        ldr r0, =enemy2
        ldr r1, =enemy2_controls

    skipDrawSecondEnemies:
        add r4, r4, #1
		
    drawSecondEnemiesConditionTest:
        cmp r4, #10
        blt drawSecondEnemiesBody

	// Epilogue.
	pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}

drawThirdEnemies:
	// r0 - pixmap ptr.
	// r1 - pixmap control ptr.
	// Prologue.
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

    mov r4, #0
    b drawThirdEnemiesConditionTest

    drawThirdEnemiesBody:
        mov r5, #4
        mul r6, r4, r5
        
        // Get address of next enemy in struct.
        add r7, r1, r6

        // Retrieve control values.
		ldrb r8, [r7, #PIXMAP_XPOS]
		ldrb r9, [r7, #PIXMAP_YPOS]

        // X-Vel is sprite display status here.
        // 1 = draw, 0 = skip.
		ldrb r10, [r7, #PIXMAP_XVEL]
        cmp r10, #0
        beq skipDrawThirdEnemies

        // Adjust x's of sprites past 256.
        cmp r8, #0x0
        beq correctDrawThirdEnemiesByte
        cmp r8, #0x18
		beq correctDrawThirdEnemiesByte
        cmp r8, #0x30
		beq correctDrawThirdEnemiesByte
        b correctDrawThirdEnemies

        correctDrawThirdEnemiesByte:
            ldr r10, =#0x100
			add r8, r10, r8

        correctDrawThirdEnemies:
            mov r1, r8
            mov r2, r9
            bl BitBlit

        // Reset caller saved registers.
        ldr r0, =enemy3
        ldr r1, =enemy3_controls
		
    skipDrawThirdEnemies:
        add r4, r4, #1
		
    drawThirdEnemiesConditionTest:
        cmp r4, #13
        blt drawThirdEnemiesBody

	// Epilogue.
	pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}

UpdatePos:
	// Update positions of bitmaps.
	// r0 - pixmap control ptr.
	// r1 - pixmap ptr.
	// Prologue.
	push {r4, r5, r6, r7, r8, r9, lr}
	
	// Store bitmap.
	mov r4, r1
	
	// Retrieve control values.
	ldrb r5, [r0, #PIXMAP_XPOS]
	ldrb r6, [r0, #PIXMAP_XVEL]
	ldrb r7, [r0, #PIXMAP_YPOS]
	ldrb r8, [r0, #PIXMAP_YVEL]
	
	// Loading bytes meaning its get cut off at xpos 265 because its 0x109 and loads 0x09 only.
	cmp r5, #0x9
	beq correctByte
	cmp r5, #0x18
	beq correctByte
	cmp r5, #0x27
	beq correctByte
	cmp r5, #0x36
	beq rightBoundary
	
	// Update coords.
	// Check if need to reverse direction.
	cmp r6, #0xf1
	beq subPos
	add r1, r5, r6
	b continueUpdate
	
	subPos:
		cmp r5, #0xa
		mov r1, r5
		beq continueUpdate
		sub r1, r5, #15
		b continueUpdate
	
	correctByte:
		mov r9, r5
		ldr r1, =#0x10f
		add r1, r5, r1
		cmp r6, #0xf1
		beq correctByteNeg
		b continueUpdate
	correctByteNeg:
		sub r1, r1, #30
		b continueUpdate
	rightBoundary:
		add r1, r5, #0x100
		cmp r6, #0xf1
		beq rightBoundaryNeg
		b continueUpdate
		
	rightBoundaryNeg:
		sub r1, r1, #15

	continueUpdate:
		add r2, r7, r8
	
	// Store updated control values.
	strb r1, [r0, #PIXMAP_XPOS]
	strb r2, [r0, #PIXMAP_YPOS]
	strb r6, [r0, #PIXMAP_XVEL]
	strb r8, [r0, #PIXMAP_YVEL]
		
	// Update bitmap pos using velocity.
	mov r0, r4

	// Draw bitmap.
	bl BitBlit
	
	// Epilogue.
	pop {r4, r5, r6, r7, r8, r9, pc}

FireLaserBeam:
	// Update positions of bitmaps.
	// r0 - pixmap ptr.
	// r1 - spaceship control ptr.
	// Prologue.
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	
	// Get spaceship x-pos.
	ldrb r1, [r1, #PIXMAP_XPOS]
	
    // Adjust X-Pos for end screen.
	cmp r1, #0x9
	beq correctLaserBeamByte
	cmp r1, #0x18
	beq correctLaserBeamByte
	cmp r1, #0x27
	beq correctLaserBeamByte
	cmp r1, #0x36
	beq correctLaserBeamByte
	cmp r1, #0x45
	beq correctLaserBeamByte

	b correctLaserBeamDraw

	correctLaserBeamByte:
		ldr r9, =#0x100
		add r1, r9, r1

	correctLaserBeamDraw:
	
    // Save r1 x-pos in r7.
    mov r7, r1
    mov r8, r2

    // Y-Pos
	mov r2, #108

	// Draw bitmap.
	bl BitBlit

    mov r0, r7
    mov r1, r8
    bl LaserBeamCollision

	// Epilogue.
	pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}

LaserBeamCollision:
    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

    mov r4, #0
    ldr r5, =enemy1_controls

    b enemy1_collision_test
    enemy1_collision_body:
        mov r6, #4
        mul r7, r4, r6
        
        // Get address of next enemy in struct.
        add r8, r5, r7

        // Retrieve current iteration enemy center coords.
		ldrb r9, [r8, #PIXMAP_XPOS]
        
        // TODO adjust for x.
        
        // Calculate enemy 1 bounding box.
        sub r6, r9, #12
        add r7, r9, #12
        // Powerup radiation added radius.
        sub r6, r6, r1
        add r7, r7, r1

        cmp r0, r6
        blt no_enemy1_collision
        cmp r0, r7
        bgt no_enemy1_collision

        // Otherwise, if center of laser in enemy 1, trigger collision.
        // Set XVEL to 1 to not draw this enemy again.
        mov r9, #0
        strb r9, [r8, #PIXMAP_XVEL]

        no_enemy1_collision:
            add r4, r4, #1

    enemy1_collision_test:
        cmp r4, #9
        blt enemy1_collision_body
    
    // Reset r4 to 0 again to cycle through other destroyed sprites.
    mov r4, #0
    ldr r5, =enemy2_controls

    b enemy2_collision_test
    enemy2_collision_body:
        mov r6, #4
        mul r7, r4, r6
        
        // Get address of next enemy in struct.
        add r8, r5, r7

        // Retrieve current iteration enemy center coords.
		ldrb r9, [r8, #PIXMAP_XPOS]
        
        // TODO adjust for x.
        
        // Calculate enemy 1 bounding box.
        sub r6, r9, #12
        add r7, r9, #12
        
        // Powerup radiation added radius.
        sub r6, r6, r1
        add r7, r7, r1

        cmp r0, r6
        blt no_enemy2_collision
        cmp r0, r7
        bgt no_enemy2_collision

        // Otherwise, if center of laser in enemy 1, trigger collision.
        // Set XVEL to 1 to not draw this enemy again.
        mov r9, #0
        strb r9, [r8, #PIXMAP_XVEL]

        no_enemy2_collision:
            add r4, r4, #1

    enemy2_collision_test:
        cmp r4, #10
        blt enemy2_collision_body
    
    mov r4, #0
    ldr r5, =enemy3_controls

    b enemy3_collision_test
    enemy3_collision_body:
        mov r6, #4
        mul r7, r4, r6
        
        // Get address of next enemy in struct.
        add r8, r5, r7

        // Retrieve current iteration enemy center coords.
		ldrb r9, [r8, #PIXMAP_XPOS]
        
        // TODO adjust for x.
        
        // Calculate enemy 1 bounding box.
        sub r6, r9, #12
        add r7, r9, #12

        // Powerup radiation added radius.
        sub r6, r6, r1
        add r7, r7, r1

        cmp r0, r6
        blt no_enemy3_collision
        cmp r0, r7
        bgt no_enemy3_collision

        // Otherwise, if center of laser in enemy 1, trigger collision.
        // Set XVEL to 1 to not draw this enemy again.
        mov r9, #0
        strb r9, [r8, #PIXMAP_XVEL]

        no_enemy3_collision:
            add r4, r4, #1

    enemy3_collision_test:
        cmp r4, #13
        blt enemy3_collision_body

    // Epilogue.
    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}

UpdateEnemyLasers:
    // r0 - enemy laser control ptr.
    // r1 - enemy laser pixmap ptr.
    // Prologue.
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

    mov r4, #0

    b enemy_laser_condition
    enemy_laser_body:
        // Calculate shift in control struct.
        mov r5, #4
        mul r6, r5, r4
        add r7, r0, r6

        // Get Y-POS/Y-VEL values.
        ldrb r8, [r7, #PIXMAP_YPOS]
	    ldrb r9, [r7, #PIXMAP_YVEL]
        
        // If reach bottom of screen, reset.
        cmp r8, #212
        bgt resetToTop

        // Else increase y-pos.
        add r10, r8, r9
        b continueAfterReset

        resetToTop:
            mov r10, #16

        continueAfterReset:
            // Store updated Y-POS.
            strb r10, [r7, #PIXMAP_YPOS]

        // Draw laser.
	    ldr r0, =enemy_laser
        ldrb r1, [r7, #PIXMAP_XPOS] // TODO adjust for end x positions.
        
        // Loading bytes meaning its get cut off at xpos 265 because its 0x109 and loads 0x09 only.
        cmp r1, #0x0
        beq correctEnemyLaserByte
        cmp r1, #0x18
        beq correctEnemyLaserByte
        cmp r1, #0x30
        beq correctEnemyLaserByte

        b continueEnemyLaserDraw

        correctEnemyLaserByte:
            ldr r2, =#0x100
            add r1, r2, r1

        continueEnemyLaserDraw:
            mov r2, r10
            bl BitBlit
		
		ldr r0, =enemy_laser_controls
		ldr r1, =enemy_laser
        // Update loop iteration.
        add r4, r4, #1
    enemy_laser_condition:
        cmp r4, #13
        blt enemy_laser_body

    // Epilogue.
	pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}

BitBlit:
	// Draws a pixelmap from a pointer at coords (x,y). 
	// r0 - pixmap ptr.
	// r1 - center x-coord.
	// r2 - center y-coord.
	// Prologue.
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

	mov r4, r0
	mov r5, r1
	mov r6, r2

	// Counters.
	mov r3, #0
	mov r11, #0

	// Load starting addresses values in registers.
	ldrh r7, [r4, #PIXMAP_WIDTH]
	ldrh r8, [r4, #PIXMAP_HEIGHT]
	ldrh r9, [r4, #PIXMAP_TRANSPARENCY]
	ldrh r10, [r4, #PIXMAP_PIXELDATA]
	
	// Calculate center offset.
	mov r0, r7
	bl RemainderDiv
	sub r5, r0
	
	mov r0, r8
	bl RemainderDiv
	sub r6, r0
	
	b bb_width_for_loop

	increment_bb_width:
		// Load next pixel address into r10.		
		mul r10, r7, r11		
		add r10, r10, r3
		
		mov r0, r10
		bl MulByTwo
		mov r10, r0
		
		add r10, r10, r4
		ldrh r10, [r10, #PIXMAP_PIXELDATA]

		// Add count to top left.
		add r0, r5, r3
		add r1, r6, r11
		mov r2, r10
		
		cmp r9, r10
		beq bb_skip_transparency
		
		bl DrawPixelBuffer
	
	bb_skip_transparency:
		add r3, r3, #1
	bb_width_for_loop:
		// If reach end of width, continue to next line.
		cmp r3, r7
		bne increment_bb_width
		
		add r11, #1

		// If reach end of height, finish.
		cmp r11, r8
		beq bb_finish_clear

		// Reset counters.
		mov r3, #0
		
		b increment_bb_width


	bb_finish_clear:
		// Epilogue.
		pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}

MulByTwo:
	// Prologue.
	push {r4, r5, lr}
	
	mov r4, r0
	mov r5, #2
	mul r0, r4, r5
	
	// Epilogue.
	pop {r4, r5, pc}

RemainderDiv:
	// Perform repeated division by 2 and return quotient.
	// r0 - dividend.
	// Prologue.
	push {r4, r5, lr}

	mov r4, r0
	mov r5, #0 // Quotient.
	
	// While loop from hint.
	b condition_test
	body:
		sub r4, r4, #2
		add r5, r5, #1
	condition_test:
		cmp r4, #2
		bge body
	// Return quotient.
	mov r0, r5
	
	// Epilogue.
	pop {r4, r5, lr}
	bx lr
	
// DrawStr implementation from HW2.

DrawStr:
	// Draw a string at coords (x,y).
	// r0 - x-coord.
	// r1 - y-coord.
	// r2 - string.
	// Prologue.
	push {r4, r5, r6, lr}
	
	mov r4, r0
	mov r5, r1
	mov r6, r2
	
	// Load first character.
	ldrb r3, [r6]
	
	do:
		bl DrawChar
	while:
		// Increase x coord and memory address.
		add r4, r4, #1
		mov r0, r4
		add r6, r6, #1
		ldrb r3, [r6]
		
		// If reach end of string, exit. Else continue.
		cmp r3, #0
		bne continue
		b exit
	// If reach end of display, exit. Else, do.
	continue:
		cmp r0, #79
		blt do
	exit:
		// Epilogue.
		pop {r4, r5, r6, pc}


DrawChar:
	// Helper function that draws ASCII character at coords (x,y).
	// r0 - x-coord.
	// r1 - y-coord.
	// r2 - ascii code.
	// Prologue.
	push {r4, r5, r6, r7, r8, r9, lr}

	mov r4, r0 // r4 = x
	mov r5, r1 // r5 = y
	mov r6, r3

	// Convert coords to corresponding address.
	ldr r7, =TEXT_BUFFER
	lsl r8, r5, #7
	add r9, r8, r4

	// Draw.
	strb r6, [r7, r9]
	
	// Epilogue.
	pop {r4, r5, r6, r7, r8, r9, pc}
